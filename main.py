import streamlit as st
import streamlit.components.v1 as components
from autolit.file_importer import File
from autolit.data_reader import Information
from autolit.plotter import Plotter
from autolit.slide import SlideShow
from autolit.autopipe import Autolitpred
from autolit import SessionState

from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

from sklearn.utils import estimator_html_repr

session_state = SessionState.get(DATA=None, df=None)


section = st.sidebar.selectbox('Section', ('Home', 'Explore Data', 'Plots', 'Modeling'))


if section == 'Home':
    st.title('Autolit')
    
    st.write('''
             Streamlining explanatory data analysis and machine-learning of tabular information, and wrapping it in a streamlit app.
             
             Upload a csv or xls file below, before going through the modules below in the sidebar.
             ''')
    
    upload = st.file_uploader(label='File Here')
    session_state.DATA = upload

    image = 'https://images.unsplash.com/photo-1543286386-713bdd548da4?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=750&q=80'
    st.image(image, 'Data is Interesting')
elif section == 'Explore Data':
    st.title('Upload Data to Explore')
    
    file_type = st.selectbox(label='filetype', options=('csv', 'xls'))
    if file_type == 'csv':
        with st.form('Import csv'):
            st.subheader('Import csv file here')
            file = File(session_state.DATA)
            sep = st.selectbox('seperator', (',', ';', '    '), help='blank selection is for tab seperated sheets.')
            csv_submitted = st.form_submit_button('Import csv')
            if csv_submitted:
                file = file.import_csv(sep)
                session_state.df = file
                file
                
                IF = Information(file)
                info = IF.information()
                info
                desc = IF.describe()
                desc
    elif file_type == 'xls':   
        with st.form('Import xls'):
            st.subheader('Import xls file here')
            file = File(session_state.DATA)
            sheetnames = file.xls_sheets()
            sheetname = st.selectbox('sheetname', (sheetnames), help='Choose which excel sheet to use data from.')
            xls_submitted = st.form_submit_button('Import xls')
            if xls_submitted:
                file = file.import_xls(sheetname)
                session_state.df = file
                file
                
                IF = Information(file)
                info = IF.information()
                info
                desc = IF.describe()
                desc
                    

elif section == 'Plots':
    if session_state.df is None:
        st.title('Upload Data to Explore')
    
    else:
        st.title('Autogenerated plots')
        st.write('''
                - Distribution plots are displayed in descending order, with respect to their skew.
                - Correlation plots are displayed in descending order, with respect to their correlation.
                
                ---''')

        df = session_state.df

        info = Information(df)
        skew_list = info.skew_list()
        corr_list, _ = info.corr_list()

        plotter = Plotter(df)
        skew_plots = plotter.skew_plotter(skew_list)
        corr_plots = plotter.corr_plotter(corr_list)


        html = open('src/slide.html', 'r').read()
        css = open('src/style.css', 'r').read()
        js = open('src/script.js', 'r').read()

        skew_sl = SlideShow(skew_plots, html, css, js)
        skew_sl = skew_sl.create()
        corr_sl = SlideShow(corr_plots, html, css, js)
        corr_sl = corr_sl.create()

        st.subheader('Distribution Plots')
        components.html(skew_sl, height=400,scrolling=True)
        st.write('---')
        st.subheader('Correlation Plots')
        components.html(corr_sl, height=400,scrolling=True)
        
elif section == 'Modeling':
    if session_state.df is None:
        st.title('Upload Data to Explore')
        
    else:
        st.title('Modeling the Data')
        

        data = session_state.df

        st.markdown('---')
        with st.form('Contruct Pipeline'):
            st.header('Contruct Pipeline')

            st.subheader('Predictors')
            numeric_features = st.multiselect('Numeric Features', data.select_dtypes('number').columns)
            numeric_transformer = st.multiselect('Numeric Transformer', [SimpleImputer(), StandardScaler()])

            st.markdown('---')

            categorical_features = st.multiselect('Categorical Features', data.select_dtypes('object').columns)
            categorical_transformer = st.multiselect('Categorical Transformer', [SimpleImputer(strategy='most_frequent'), OneHotEncoder()])

            st.markdown('---')
            st.subheader('Target')

            target = st.selectbox('Target', data.columns)

            st.markdown('---')
            st.subheader('Algorithm')
            
            algo = st.selectbox('algorithm', (LogisticRegression(), RandomForestClassifier()))

            if st.form_submit_button('Start Pipeline'):

                st.markdown('---')

                al = Autolitpred(numeric_features,
                                        categorical_features,
                                        numeric_transformer,
                                        categorical_transformer,
                                        algo)
                
                pred = al.pipline()
                
                
                st.header('Pipeline Schema')
                st.components.v1.html(estimator_html_repr(pred), scrolling=True)
                
                
                st.header('Pipeline Evaluation')
                X_train, X_test, y_train, y_test = train_test_split(data[numeric_features + categorical_features], data[target], test_size=0.2,
                                                                    random_state=0)

                pred.fit(X_train, y_train)
                st.write(f'Accuracy {pred.score(X_test, y_test)}')